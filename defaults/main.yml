---

# Teleport package state; use `present` to make sure it's installed, or `latest`
# if you want to upgrade or switch versions using a new repo.
teleport_packages_state: present
teleport_packages: teleport
teleport_repo_url: "https://rpm.releases.teleport.dev/teleport.repo"

teleport_service: teleport
teleport_state: started
teleport_enabled: yes

teleport_configuration_path: "/etc/teleport.yaml"

teleport_nodename: "{{ ansible_fqdn }}"
teleport_data_dir: "/var/lib/teleport"
teleport_auth_token: "xxx-changeme-xxx"
teleport_auth_servers:
  - 127.0.0.1:3025

teleport_log_path: "/var/lib/teleport/teleport.log"
# Possible severity values are INFO, WARN and ERROR (default).
teleport_log_level: "ERROR"

# Configuration for the storage back-end used for the cluster state and the
# audit log.
# By default teleport uses the `data_dir` directory on a local filesystem
teleport_storage_type: "dir"
teleport_dynamodb_continuous_backups: false
teleport_dynamodb_auto_scaling: false

# Turns 'auth' role on. yes or no
teleport_auth_enabled: no

# A cluster name is used as part of a signature in certificates
# generated by this CA.
#
# We strongly recommend explicitly setting it to something meaningful as it
# becomes important when configuring trust between multiple clusters.
# IMPORTANT: if you change cluster_name, it will invalidate all generated
# certificates and keys (may need to wipe out /var/lib/teleport directory)
teleport_auth_cluster_name: "main"

# second_factor can be off, otp, or u2f
teleport_auth_second_factor: off

# IP and the port to bind to. Other Teleport nodes will be connecting to
# this port (AKA "Auth API" or "Cluster API") to validate client
# certificates
teleport_auth_listen_address: "0.0.0.0:3025"

# Pre-defined tokens for adding new nodes to a cluster. Each token specifies
# the role a new node will be allowed to assume. The more secure way to
# add nodes is to use `tctl nodes add --ttl` command to generate auto-expiring
# tokens.
teleport_auth_tokens_node: []
teleport_auth_tokens_proxy: []
teleport_auth_tokens_auth: []

# Optional setting for configuring session recording. Possible values are:
#    "node"  : sessions will be recorded on the node level  (the default)
#    "proxy" : recording on the proxy level, see "Recording Proxy Mode"
#    (https://goteleport.com/docs/architecture/proxy/#recording-proxy-mode).
#    "off"   : session recording is turned off
teleport_session_recording: "node"
teleport_proxy_checks_host_keys: yes

# Determines if SSH sessions to cluster nodes are forcefully terminated
# after no activity from a client (idle client).
# Examples: "30m", "1h" or "1h30m"
teleport_client_idle_timeout: "never"

teleport_ssh_enabled: true
teleport_ssh_listen_address: "0.0.0.0:3022"
teleport_ssh_labels: '{{ hostvars[inventory_hostname].group_names[0] }}'

# Turns 'proxy' role on. Default is no
teleport_proxy_enabled: no

# SSH forwarding/proxy address. Command line (CLI) clients always begin their
# SSH sessions by connecting to this port
teleport_proxy_listen_address: "0.0.0.0:3023"

# The HTTPS listen address to serve the Web UI and also to authenticate the
# command line (CLI) users via password+HOTP
# Also handles the PostgreSQL proxy if database access is enabled.
teleport_proxy_web_listen_address: "0.0.0.0:3080"

# Reverse tunnel listening address. An auth server (CA) can establish an
# outbound (from behind the firewall) connection to this address.
# This will allow users of the outside CA to connect to behind-the-firewall
# nodes.
teleport_proxy_tunnel_listen_address: "0.0.0.0:3024"

teleport_proxy_https_key_file: '/etc/teleport/keys/https.key'
teleport_proxy_https_cert_file: '/etc/teleport/keys/https.pem'
